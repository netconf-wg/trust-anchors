<truststore
  xmlns="urn:ietf:params:xml:ns:yang:ietf-truststore"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">

  <!-- A bag of Certificate Bags -->
  <certificate-bags>

    <!-- Trust Anchor Certs for Authenticating Servers -->
    <certificate-bag>
      <name>trusted-server-ca-certs</name>
      <description>
        Trust anchors (i.e. CA certs) used to authenticate server
        certificates.  A server certificate is authenticated if its
        end-entity certificate has a chain of trust to one of these
        certificates.
      </description>
      <certificate>
        <name>Server Cert Issuer #1</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
      <certificate>
        <name>Server Cert Issuer #2</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
    </certificate-bag>
  
    <!-- End Entity Certs for Authenticating Servers -->
    <certificate-bag>
      <name>trusted-server-ee-certs</name>
      <description>
        Specific end-entity certificates used to authenticate server
        certificates.  A server certificate is authenticated if its
        end-entity certificate is an exact match to one of these
        certificates.
      </description>
      <certificate>
        <name>My Application #1</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
      <certificate>
        <name>My Application #2</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
    </certificate-bag>
  
    <!-- Trust Anchor Certs for Authenticating Clients -->
    <certificate-bag>
      <name>trusted-client-ca-certs</name>
      <description>
        Trust anchors (i.e. CA certs) used to authenticate client
        certificates.  A client certificate is authenticated if its
        end-entity certificate has a chain of trust to one of these
        certificates.
      </description>
      <certificate>
        <name>Client Identity Issuer #1</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
      <certificate>
        <name>Client Identity Issuer #2</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
    </certificate-bag>
  
    <!-- End Entity Certs for Authenticating Clients -->
    <certificate-bag>
      <name>trusted-client-ee-certs</name>
      <description>
        Specific end-entity certificates used to authenticate client
        certificates.  A client certificate is authenticated if its
        end-entity certificate is an exact match to one of these
        certificates.
      </description>
      <certificate>
        <name>George Jetson</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
      <certificate>
        <name>Fred Flintstone</name>
        <cert-data>base64encodedvalue==</cert-data>
      </certificate>
    </certificate-bag>
  </certificate-bags>

  <!-- A List of Public Key Bags -->
  <public-key-bags>

    <!-- Public Keys for Authenticating SSH Servers -->
    <public-key-bag>
      <name>trusted-ssh-public-keys</name>
      <description>
        Specific SSH public keys used to authenticate SSH server
        public keys.  An SSH server public key is authenticated if
        its public key is an exact match to one of these public keys.

        This list of SSH public keys is analogous to OpenSSH's
        "/etc/ssh/ssh_known_hosts" file.
      </description>
      <public-key>
        <name>corp-fw1</name>
        <public-key-format>
          ct:ssh-public-key-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
      <public-key>
        <name>corp-fw2</name>
        <public-key-format>
          ct:ssh-public-key-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
    </public-key-bag>

    <!-- SSH Public Keys for Authenticating Application A -->
    <public-key-bag>
      <name>SSH Public Keys for Application A</name>
      <description>
        SSH public keys used to authenticate application A's SSH
        public keys.  An SSH public key is authenticated if it
        is an exact match to one of these public keys.
      </description>
      <public-key>
        <name>Application Instance #1</name>
        <public-key-format>
          ct:ssh-public-key-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
      <public-key>
        <name>Application Instance #2</name>
        <public-key-format>
          ct:ssh-public-key-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
    </public-key-bag>

    <!-- Raw Public Keys for TLS Servers -->
    <public-key-bag>
      <name>Raw Public Keys for TLS Servers</name>
      <public-key>
        <name>Raw Public Key #1</name>
        <public-key-format>
          ct:subject-public-key-info-format</public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
      <public-key>
        <name>Raw Public Key #2</name>
        <public-key-format>
          ct:subject-public-key-info-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
    </public-key-bag>

    <!-- Raw Public Keys for TLS Clients -->
    <public-key-bag>
      <name>Raw Public Keys for TLS Clients</name>
      <public-key>
        <name>Raw Public Key #1</name>
        <public-key-format>
          ct:subject-public-key-info-format
        </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
      <public-key>
        <name>Raw Public Key #2</name>
        <public-key-format>
          ct:subject-public-key-info-format
      </public-key-format>
        <public-key>base64encodedvalue==</public-key>
      </public-key>
    </public-key-bag>
  </public-key-bags>
</truststore>
