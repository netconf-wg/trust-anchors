<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     consensus="true"
     ipr="trust200902"
     docName="draft-ietf-netconf-trust-anchors-latest" >
    <front>
      <title>A YANG Data Model for a Truststore</title>
      <author initials="K." surname="Watsen" fullname="Kent Watsen">
        <organization>Watsen Networks</organization>
        <address>
          <email>kent+ietf@watsen.net</email>
        </address>
      </author>
      <date/>
      <area>Operations</area>
      <workgroup>NETCONF Working Group</workgroup>
      <abstract>
        <t>This document defines a YANG module for configuring
          bags of certificates and bags of public keys that can be
          referenced by other data models for trust.  Notifications
          are sent when certificates are about to expire.</t>
      </abstract>
      <note title="Editorial Note (To be removed by RFC Editor)">
        <t>This draft contains placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  No other RFC Editor
          instructions are specified elsewhere in this document.</t>
        <t>Artwork in this document contains shorthand references to drafts in
          progress.  Please apply the following replacements:
          <list style="symbols">
            <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
            <t><spanx style="verb">BBBB</spanx> --&gt; the assigned RFC value for this draft</t>
          </list>
        </t>
        <t>Artwork in this document contains placeholder values for the date
          of publication of this draft.  Please apply the following replacement:
          <list  style="symbols">
            <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
          </list>
        </t>
        <t>The following Appendix section is to be removed prior to publication:
          <list  style="symbols">
            <t><xref target="change-log"/>.  Change Log</t>
          </list>
        </t>
      </note>
    </front>
    <middle>
      <section title="Introduction">

        <t>This document defines a YANG 1.1 <xref target="RFC7950"/> module having
          the following characteristics:
        <list>
          <t>Provide a central truststore for storing raw public keys and/or certificates.</t>
          <t>Provide support for storing named bags of raw public keys and/or named bags
            of certificates.</t>
          <t>Provide types that can be used to reference raw public keys or certificates
            stored in the central truststore.</t>
          <t>Provide groupings that enable raw public keys and certificates to be
            configured locally or as references truststore instances.</t>
          <t>Enable the truststore to be instantiated in other data models, in addition
            to or in lieu of the central trusttore instance.</t>
        </list>
      </t>


INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

        <section title="Adherence to the NMDA">
          <t>This document is compliant with the Network Management Datastore Architecture
            (NMDA) <xref target="RFC8342"/>.  For instance, trust anchors installed
            during manufacturing (e.g., for trusted well-known services), are expected
            to appear in &lt;operational&gt; (see <xref target="built-ins"/>).</t>
        </section>

        <section title="Conventions">
          <t>Various examples used in this document use a placeholder
            value for binary data that has been base64 encoded (e.g.,
            "BASE64VALUE=").  This placeholder value is used as real
            base64 encoded structures are often many lines long and
            hence distracting to the example being presented.</t>
        </section>

      </section>

      <section title="The &quot;ietf-truststore&quot; Module">

       <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module
         that defines a "truststore" and groupings supporting downstream
         modules to reference the truststore or have locally-defined definitions.</t>

        <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
          "ietf-truststore".  A high-level overview of the module is provided in
          <xref target="truststore-verview"/>. Examples illustrating the module's use
          are provided in <xref target="truststore-examples">Examples</xref>. The YANG
          module itself is defined in <xref target="truststore-yang-module"/>.</t>

       <section title="Data Model Overview" anchor="truststore-verview">

          <t>This section provides an overview of the "ietf-truststore" module
            in terms of its features, typedefs, groupings, and protocol-accessible
            nodes.</t>

          <section title="Features" anchor="features" toc="exclude">
            <t>The following diagram lists all the "feature" statements
              defined in the "ietf-truststore" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
Features:
  +-- central-truststore-supported
  +-- local-definitions-supported
  +-- certificates
  +-- public-keys
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>

          <section title="Typedefs" anchor="typedefs" toc="exclude">
            <t>The following diagram lists the "typedef" statements defined in
              the "ietf-truststore" module:</t>
            <t>
              <figure>
               <artwork><![CDATA[
Typedefs:
  leafref
    +-- certificate-bag-ref
    +-- certificate-ref
    +-- public-key-bag-ref
    +-- public-key-ref
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
            <t>Comments:</t>
            <ul>
              <li>All the typedefs defined in the "ietf-truststore" module
                extend the base "leafref" type defined in <xref target="RFC7950"/>.</li>
              <li>The leafrefs refer to certificates, public keys, and bags
                in the central truststore, when this module is implemented.</li>
              <li>These typedefs are provided as an aid to downstream
                modules that import the "ietf-truststore" module.</li>
            </ul>
          </section>

          <section title="Groupings" toc="exclude">
            <t>The "ietf-truststore" module defines the following "grouping" statements:</t>
            <ul spacing="compact">
              <li>local-or-truststore-certs-grouping</li>
              <li>local-or-truststore-public-keys-grouping</li>
              <li>truststore-grouping</li>
            </ul>
            <t>Each of these groupings are presented in the following subsections.</t>

            <section title="The &quot;local-or-truststore-certs-grouping&quot; Grouping" anchor="local-or-truststore-certs-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "local-or-truststore-certs-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-local-or-truststore-certs-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "local-or-truststore-certs-grouping" grouping is provided
                  soley as convenience to downstream modules that wish to offer
                  an option whether a bag of certificates can be defined locally
                  or as a reference to a bag in the truststore.</li>
                <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements MAY be augmented in if, e.g., there is a
                  need to reference a bag in an alternate location.</li>
                <li>For the "local-definition" option, the "certificate" node
                  uses the "trust-anchor-cert-grouping" grouping discussed in
                  <relref section="2.1.4.7" target="I-D.ietf-netconf-crypto-types"/>.</li>
                <li>For the "truststore" option, the "truststore-reference" is an
                  instance of the "certificate-bag-ref" discussed in <xref target="typedefs"/>.</li>
              </ul>
            </section>

            <section title="The &quot;local-or-truststore-public-keys-grouping&quot; Grouping" anchor="local-or-truststore-public-keys-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "local-or-truststore-public-keys-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-local-or-truststore-public-keys-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "local-or-truststore-public-keys-grouping" grouping is provided
                  soley as convenience to downstream modules that wish to offer
                  an option whether a bag of public keys can be defined locally
                  or as a reference to a bag in the truststore.</li>
                <li>A "choice" statement is used to expose the various options.
                  Each option is enabled by a "feature" statement.  Additional
                  "case" statements MAY be augmented in if, e.g., there is a
                  need to reference a bag in an alternate location.</li>
                <li>For the "local-definition" option, the "public-key" node uses the
                  "public-key-grouping" grouping discussed in <relref section="2.1.4.4"
                  target="I-D.ietf-netconf-crypto-types"/>.</li>
                <li>For the "truststore" option, the "truststore-reference" is an
                  instance of the "certificate-bag-ref" discussed in <xref target="typedefs"/>.</li>
              </ul>
            </section>

            <section title="The &quot;truststore-grouping&quot; Grouping" anchor="truststore-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "truststore-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-truststore-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "truststore-grouping" grouping defines a truststore instance
                  as being composed of certificates and/or public keys, both of which
                  are enabled by "feature" statements.  The structure supporting
                  certificates and public keys is essentially the same, having an
                  outer list of "bags" containing in inner list of objects
                  (certificates or public keys).  The bags enable trust anchors
                  serving a common purpose to be grouped and referenced together.</li>
                <li>For certificates, each certificate is defined by the
                  "trust-anchor-cert-grouping" grouping <relref section="2.1.4.7"
                  target="I-D.ietf-netconf-crypto-types"/>.  Thus the "cert-data"
                  node is a CMS structure that can be composed of a chain of one or
                  more certificates.  Additionally, the "certificate-expiration"
                  notification enables the server to alert clients when certificates
                  are nearing or have already expired.</li>
                <li>For public keys, each public key is defined by the
                  "public-key-grouping" grouping <relref section="2.1.4.4"
                  target="I-D.ietf-netconf-crypto-types"/>.  Thus the "public-key"
                  node can be one of any number of structures specified by the
                  "public-key-format" identity node.</li>
              </ul>
            </section>
          </section>

          <section title="Protocol-accessible Nodes" anchor="proto-access-nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "ietf-truststore" module, without
              expanding the "grouping" statements:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-truststore-tree-no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>The following tree diagram <xref target="RFC8340"/> lists all the
              protocol-accessible nodes defined in the "ietf-truststore" module, with
              all "grouping" statements expanded, enabling the truststore's full
              structure to be seen:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-truststore-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
              <li>The protcol-accessible nodes for the "ietf-truststore" module
                are an instance of the "truststore-grouping" grouping discussed in
                <xref target="truststore-grouping"/>.</li>
              <li>The reason for why the "truststore-grouping" exists separate from
                the protocol-accessible nodes definition is to enable
                instances of the truststore to be instantiated in other
                locations, as may be needed or desired by some modules.</li>
            </ul>
          </section>
        </section>

        <section title="Example Usage" anchor="truststore-examples">

          <t>The examples in this section are encoded using XML, such as might
            be the case when using the NETCONF protocol. Other encodings MAY
            be used, such as JSON when using the RESTCONF protocol.</t>

          <section title="A Truststore Instance" anchor="ts-inst" toc="exclude">
            <t>This section presents an example illustrating trust anchors
              in &lt;intended&gt;, as per <xref target="proto-access-nodes"/>.
              Please see <xref target="built-ins"/> for an example illustrating
              built-in values in &lt;operational&gt;.</t>
            <t>The example contained in this section defines eight bags of trust
              anchors.  There are four certificate-based bags and four public
              key based bags.  The following diagram provides an overview of the
              contents in the example:</t>
            <t>
              <figure>
                <artwork><![CDATA[
Certificate Bags
  +-- Trust anchor certs for authenticating a set of remote servers
  +-- End entity certs for authenticating a set of remote servers
  +-- Trust anchor certs for authenticating a set of remote clients
  +-- End entity certs for authenticating a set of remote clients

Public Key Bags
  +-- SSH keys to authenticate a set of remote SSH server
  +-- SSH keys to authenticate a set of remote SSH clients
  +-- Raw public keys to authenticate a set of remote SSH server
  +-- Raw public keys to authenticate a set of remote SSH clients
]]></artwork>
              </figure>
            </t>
            <t>Following is the full example:</t>
            <t>
              <figure>
                <artwork><![CDATA[
  INSERT_TEXT_FROM_FILE(refs/ex-truststore.xml)
  ]]></artwork>
              </figure>
            </t>
          </section>

          <section title="A Certificate Expiration Notification" toc="exclude">
            <t>The following example illustrates the "certificate-expiration"
              notification (per <relref section="2.1.4.6" target="I-D.ietf-netconf-crypto-types"/>)
              for a certificate configured in the truststore in <xref target="ts-inst"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-notification-ce.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="The &quot;Local or Truststore&quot; Groupings" toc="exclude">
            <t>This section illustrates the various "local-or-truststore" groupings
              defined in the "ietf-truststore" module, specifically the
              "local-or-truststore-certs-grouping"
              (<xref target="local-or-truststore-certs-grouping"/>) and
              "local-or-truststore-public-keys-grouping"
              (<xref target="local-or-truststore-public-keys-grouping"/>)
              groupings.</t>

            <t>These examples assume the existence of an example module called "ex-truststore-usage"
              having the namespace "http://example.com/ns/example-truststore-usage".</t>
            <t>The ex-truststore-usage module is first presented using tree diagrams
              <xref target="RFC8340"/>, followed by an instance example illustrating
              all the "local-or-truststore" groupings in use, followed by the YANG
              module itself.</t>
            <t>The following tree diagram illustrates "ex-truststore-usage" without
              expanding the "grouping" statements:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-truststore-usage-tree-no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>The following tree diagram illustrates the "ex-truststore-usage"
              module, with all "grouping" statements expanded, enabling the
              truststore's full structure to be seen:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-truststore-usage-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>The following example provides two equivalent instances of
              each grouping, the first being a reference to a truststore
              and the second being locally-defined.  The instance having
              a reference to a truststore is consistent with the truststore
              defined in <xref target="ts-inst"/>.  The two instances are
              equivalent, as the locally-defined instance example contains
              the same values defined by the truststore instance referenced
              by its sibling example.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-truststore-usage.xml)
]]></artwork>
              </figure>
            </t>
            <t>Following is the "ex-truststore-usage" module's YANG definition:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ex-truststore-usage@YYYY-MM-DD.yang)
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

        <section title="YANG Module" anchor="truststore-yang-module">
          <t>This YANG module imports modules from <xref target="RFC8341"/>
          and <xref target="I-D.ietf-netconf-crypto-types"/>.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "ietf-truststore@YYYY-MM-DD.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-truststore@YYYY-MM-DD.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title="Support for Built-in Trust Anchors" anchor="built-ins">
        <t>In some implementations, a server may define some built-in trust anchors.
          For instance, there may be built-in trust anchors enabling the server to
          securely connect to well-known services (e.g., an SZTP <xref target="RFC8572"/>
          bootstrap server) or public CA certificates to connect to arbitrary services
          using public PKI.</t>
        <t>Built-in trust anchors are expected to be set by a vendor-specific process.
          Any ability for operators to modify built-in trust anchors is outside the
          scope of this document.</t>
        <t>As built-in trust anchors are provided by the server, they are present in
          &lt;operational&gt;, if used. The example below illustrates what the truststore in
          &lt;operational&gt; might look like for a server in its factory default
          state.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-truststore-default-operational.xml)
]]></artwork>
          </figure>
        </t>
        <t>In order for the built-in bags of trust anchors and/or their trust anchors to
          be referenced by configuration, they MUST first be copied into &lt;running&gt;.</t>
        <t>The built-in bags and/or their trust anchors MUST be copied into &lt;running&gt;
          using the same "key" values if it is desired for the server to maintain/update
          them (e.g., a software update may update a bag of trusted public CA
          certificates used for TLS-client connections).</t>
        <t>Built-in bags and/or their trust anchors MAY be copied into other parts
          of the configuration but, by doing so, they lose their association to the
          built-in entries and any assurances afforded by knowing they are/were built-in.</t>
        <t>The built-in bags and/or their trust anchors are immutable by configuration
          operations.  Servers MUST ignore attempts to modify any aspect of built-in
          bags and/or their trust anchors from &lt;running&gt;.</t>
        <t>The following example illustrates how a single built-in public CA
          certificate from the previous example has been propagated to &lt;running&gt;:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-truststore-default-running.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Security Considerations">

        <section title="Security of Data at Rest">
          <t>The YANG module defined in this document defines a mechanism called a
            "truststore" that, by its name, suggests that its contents are protected
            from unauthorized modification.</t>
          <t>Security controls for the API (i.e., data in motion) are
            discussed in <xref target="sec-mod"/>, but controls for the
            data at rest cannot be specified by the YANG module.</t>
          <t>In order to satisfy the expectations of a "truststore", it
            is RECOMMENDED that implementations ensure that the truststore
            contents are protected from unauthorized modifications when
            at rest.</t>
        </section>

        <section title="Unconstrained Public Key Usage">
          <t>This module enables the configuration of public keys without
            constraints on their usage, e.g., what operations the key is
            allowed to be used for (encryption, verification, both).</t>
          <t>This module also enables the configuration of certificates,
            where each certificate may constrain the usage of the public
            key according to local policy.</t>
        </section>

        <section title="The &quot;ietf-truststore&quot; YANG Module" anchor="sec-mod">
          <t>The YANG module defined in this document is designed to be accessed via YANG
            based management protocols, such as NETCONF <xref target="RFC6241"/> and
            RESTCONF <xref target="RFC8040"/>.  Both of these protocols have mandatory-to-implement
            secure transport layers (e.g., SSH, TLS) with mutual authentication.</t>

          <t>The NETCONF access control model (NACM) <xref target="RFC8341"/> provides the means
            to restrict access for particular users to a pre-configured subset of all available
            protocol operations and content.</t>

          <t>None of the readable data nodes defined in this YANG module are considered sensitive
            or vulnerable in network environments. The NACM "default-deny-all" extension
            has not been set for any data nodes defined in this module.</t>

          <t>All the writable data nodes defined by this module, both in the
            "grouping" statements as well as the protocol-accessible "truststore"
            instance, may be considered sensitive or vulnerable in some network
            environments. For instance, any modification to a trust anchor or
            reference to a trust anchor  may dramatically alter the implemented
            security policy.  For this reason, the NACM extension "default-deny-write"
            has been set for all data nodes defined in this module.</t>

          <t>This module does not define any "rpc" or "action" statements, and
            thus the security considerations for such is not provided here.</t>
        </section>
      </section>

      <section title="IANA Considerations">
        <section title='The "IETF XML" Registry'>
          <t>This document registers one URI in the "ns" subregistry of
          the IETF XML Registry <xref target="RFC3688"/>.  Following the
          format in <xref target="RFC3688"/>, the following registration
          is requested:</t>
          <t>
            <figure>
                <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-truststore
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.
</artwork>
            </figure>
          </t>
        </section>
        <section title='The "YANG Module Names" Registry'>
          <t>This document registers one YANG module in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          following registration is requested:</t>
          <t>
            <figure>
                <artwork>
   name:         ietf-truststore
   namespace:    urn:ietf:params:xml:ns:yang:ietf-truststore
   prefix:       ts
   reference:    RFC BBBB
</artwork>
            </figure>
          </t>
        </section>
      </section>


    </middle>

    <back>
      <references title="Normative References">
        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.7950.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <?rfc include="reference.RFC.8341.xml"?>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
      </references>
      <references title="Informative References">
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <?rfc include="reference.RFC.6241.xml"?>
        <?rfc include="reference.RFC.8040.xml"?>
        <?rfc include="reference.RFC.8340.xml"?>
        <?rfc include="reference.RFC.8342.xml"?>
        <?rfc include="reference.RFC.8572.xml"?>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>
      </references>

      <section title="Change Log" removeInRFC="true" anchor="change-log">
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Added features "x509-certificates" and "ssh-host-keys".</t>
              <t>Added nacm:default-deny-write to "trust-anchors" container.</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>Switched "list pinned-certificate" to use the
                 "trust-anchor-cert-grouping" from crypto-types.
                 Effectively the same definition as before.</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>Updated copyright date, boilerplate template, affiliation,
                folding algorithm, and reformatted the YANG module.</t>
            </list>
          </t>
        </section>
        <section title="03 to 04">
          <t>
            <list style="symbols">
              <t>Added groupings 'local-or-truststore-certs-grouping'
                and 'local-or-truststore-host-keys-grouping', matching
                similar definitions in the keystore draft.  Note new
                (and incomplete) "truststore" usage!</t>
              <t>Related to above, also added features 'truststore-supported'
                and 'local-trust-anchors-supported'.</t>
            </list>
          </t>
        </section>
        <section title="04 to 05">
          <t>
            <list style="symbols">
              <t>Renamed "trust-anchors" to "truststore"</t>
              <t>Removed "pinned." prefix everywhere, to match truststore rename</t>
              <t>Moved everything under a top-level 'grouping' to enable use in other contexts.</t>
              <t>Renamed feature from 'local-trust-anchors-supported' to 'local-definitions-supported' (same name used in keystore)</t>
              <t>Removed the "require-instance false" statement from the "*-ref" typedefs.</t>
              <t>Added missing "ssh-host-keys" and "x509-certificates" if-feature statements</t>
            </list>
          </t>
        </section>
        <section title="05 to 06">
          <t>
            <list style="symbols">
              <t>Editorial changes only.</t>
            </list>
          </t>
        </section>
        <section title="06 to 07">
          <t>
            <list style="symbols">
              <t>Added Henk Birkholz as a co-author (thanks Henk!)</t>
              <t>Added PSKs and raw public keys to truststore.</t>
            </list>
          </t>
        </section>
        <section title="07 to 08">
          <t>
            <list style="symbols">
              <t>Added new "Support for Built-in Trust Anchors" section.</t>
              <t>Removed spurious "uses ct:trust-anchor-certs-grouping" line.</t>
              <t>Removed PSK from model.</t>
            </list>
          </t>
        </section>
        <section title="08 to 09">
          <t>
            <list style="symbols">
              <t>Removed remaining PSK references from text.</t>
              <t>Wrapped each top-level list with a container.</t>
              <t>Introduced "bag" term.</t>
              <t>Merged "SSH Public Keys" and "Raw Public Keys" in a single "Public Keys" bag.
                Consuming downstream modules (i.e., "ietf-[ssh/tls]-[client/server]) refine
                the "public-key-format" to be either SSH or TLS specific as needed.</t>
            </list>
          </t>
        </section>
        <section title="09 to 10">
          <t>
            <list style="symbols">
              <t>Removed "algorithm" node from examples.</t>
              <t>Removed the no longer used statements supporting the old "ssh-public-key" and "raw-public-key" nodes.</t>
              <t>Added a "Note to Reviewers" note to first page.</t>
            </list>
          </t>
        </section>
        <section title="10 to 11">
          <t>
            <list style="symbols">
              <t>Corrected module prefix registered in the IANA Considerations section.</t>
              <t>Modified 'local-or-truststore-certs-grouping' to use a list (not a leaf-list).</t>
              <t>Added new example section "The Local or Truststore Groupings".</t>
              <t>Clarified expected behavior for "built-in" certificates in &lt;operational&gt;</t>
              <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
              <t>Updated the Security Considerations section.</t>
            </list>
          </t>
        </section>
        <section title="11 to 12">
          <t>
            <list style="symbols">
              <t>Fixed a copy/paste issue in the "Data at Rest" Security Considerations section.</t>
            </list>
          </t>
        </section>
        <section title="12 to 13">
          <t>
            <list style="symbols">
              <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
            </list>
          </t>
        </section>
        <section title="13 to 14">
          <t>
            <list style="symbols">
              <t>Added an "Unconstrained Public Key Usage" Security Consideration to address
                concern raised by SecDir.</t>
              <t>Addressed comments raised by YANG Doctor.</t>
            </list>
          </t>
        </section>
        <section title="14 to 15">
          <t>
            <list style="symbols">
              <t>Added prefixes to 'path' statements per trust-anchors/issues/1</t>
              <t>Renamed feature "truststore-supported" to "central-truststore-supported".</t>
              <t>Associated with above, generally moved text to refer to a "central" truststore.</t>
              <t>Removed two unecessary/unwanted "min-elements 1" and associated "presence" statements.</t>
              <t>Aligned modules with `pyang -f` formatting.</t>
              <t>Fixed nits found by YANG Doctor reviews.</t>
            </list>
          </t>
        </section>
        <section title="15 to 16">
          <t>
            <list style="symbols">
              <t>Replaced "base64encodedvalue==" with "BASE64VALUE=" in examples.</t>
              <t>Minor editorial nits</t>

              <t>SUBMISSION PENDING</t>
            </list>
          </t>
        </section>
        <!--
        <section title="16 to 17">
          <t>
            <list style="symbols">
              <t>SUBMISSION PENDING</t>
            </list>
          </t>
        </section>
        -->
      </section>

      <section title="Acknowledgements" numbered="no">
        <t>The authors especially thank Henk Birkholz for contributing YANG
          to the ietf-truststore module supporting raw public keys and PSKs
          (pre-shared or pairwise-symmetric keys).  While these contributions
          were eventually replaced by reusing the existing support for
          asymmetric and symmetric trust anchors, respectively, it was only
          thru Henk's initiative that the WG was able to come to that result.</t>

        <t>The authors additionally thank the following for helping give shape
          to this work (ordered by first name):
          Balázs Kovács,
          Eric Voit,
          Juergen Schoenwaelder,
          Liang Xia,
          Martin Björklund,
          Nick Hancock,
          and Yoav Nir.
        </t>
      </section>

    </back>
</rfc>

